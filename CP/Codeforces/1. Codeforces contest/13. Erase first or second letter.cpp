// B. Erase First or Second Letter

// time limit per test1 second
// memory limit per test256 megabytes
// inputstandard input
// outputstandard output

// You are given a string s of length n. Let's define two operations you can apply on the string:

// remove the first character of the string;
// remove the second character of the string.

// Your task is to find the number of distinct non-empty strings that can be generated by applying the given operations on the initial string any number of times (possibly zero), in any order.

// Input
// Each test consists of multiple test cases. The first line contains a single integer t (1≤t≤104) — the number of test cases. The description of the test cases follows. The first line of each test case contains n (1≤n≤105) — the length of the string. The second line of each test case contains the string s. It is guaranteed that the string only contains lowercase letters of the English alphabet. It is guaranteed that the sum of n over all test cases does not exceed 2⋅105.

// Output
// For each test case, output a single integer: the number of distinct non-empty strings you can get.

// Example
// inputCopy
// 5
// 5
// aaaaa
// 1
// z
// 5
// ababa
// 14
// bcdaaaabcdaaaa
// 20
// abcdefghijklmnopqrst

// outputCopy
// 5
// 1
// 9
// 50
// 210

// Note
// In the first test case, we can get the following strings: a, aa, aaa, aaaa, aaaaa.
// In the third test case, for example, the word ba can be reached in the following way:

// remove the first character of the current string ababa, getting baba;
// remove the second character of the current string baba, getting bba;
// remove the second character of the current string bba, getting ba.

#include <iostream>
#include <bits/stdc++.h>
using namespace std;

int main()
{
    int t;
    cin >> t;

    while(t--)
    {
        int n;
        cin >> n;

        string s;
        cin >> s;


    }
}
